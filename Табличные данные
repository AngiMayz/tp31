import json
from PyQt5.QtWidgets import (
    QApplication, QTableWidget, QTableWidgetItem, QVBoxLayout, QWidget, QSpinBox, QLabel,
    QRadioButton, QHBoxLayout, QComboBox
)


class Weather:
    def __init__(self, city, avg_temp, min_temp, max_temp, unit):
        self.city = city
        self.avg_temp = avg_temp
        self.min_temp = min_temp
        self.max_temp = max_temp
        self.unit = unit


def load_weather_data(json_file):
    try:
        with open(json_file, 'r', encoding='utf-8') as file:
            return [Weather(**item) for item in json.load(file)]
    except FileNotFoundError:
        print(f"Файл {json_file} не найден.")
        return []


def display_weather_data(weather_objects):
    app = QApplication([])
    window = QWidget()
    layout = QVBoxLayout()

    type_label = QLabel("Тип температуры:")
    type_combo = QComboBox()
    type_combo.addItems(["Средняя", "Минимальная", "Максимальная"])
    type_combo.setCurrentIndex(0)

    threshold_spinbox = QSpinBox()
    threshold_spinbox.setRange(-100, 100)
    above_radio = QRadioButton("Выше")
    below_radio = QRadioButton("Ниже")
    above_radio.setChecked(True)

    min_temp_spinbox = QSpinBox()
    min_temp_spinbox.setRange(-100, 100)
    max_temp_spinbox = QSpinBox()
    max_temp_spinbox.setRange(-100, 100)
    min_temp_spinbox.setValue(-100)
    max_temp_spinbox.setValue(100)


    table = QTableWidget(0, 3)
    table.setHorizontalHeaderLabels(['Город', 'Температура', 'Единица'])

    def update_table():
        
        table.setRowCount(0)

        temp_type = type_combo.currentText()
        threshold = threshold_spinbox.value()
        is_above = above_radio.isChecked()
        min_temp = min_temp_spinbox.value()
        max_temp = max_temp_spinbox.value()

        for weather in weather_objects:
           
            if temp_type == "Средняя":
                temp = weather.avg_temp
            elif temp_type == "Минимальная":
                temp = weather.min_temp
            elif temp_type == "Максимальная":
                temp = weather.max_temp

            if is_above and temp <= threshold:
                continue
            if not is_above and temp >= threshold:
                continue

            if not (min_temp <= temp <= max_temp):
                continue

            row_position = table.rowCount()
            table.insertRow(row_position)
            table.setItem(row_position, 0, QTableWidgetItem(weather.city))
            table.setItem(row_position, 1, QTableWidgetItem(str(temp)))
            table.setItem(row_position, 2, QTableWidgetItem(weather.unit))

    type_combo.currentIndexChanged.connect(update_table)
    threshold_spinbox.valueChanged.connect(update_table)
    above_radio.toggled.connect(update_table)
    below_radio.toggled.connect(update_table)
    min_temp_spinbox.valueChanged.connect(update_table)
    max_temp_spinbox.valueChanged.connect(update_table)

    type_layout = QHBoxLayout()
    type_layout.addWidget(type_label)
    type_layout.addWidget(type_combo)

    threshold_layout = QHBoxLayout()
    threshold_layout.addWidget(QLabel("Порог температуры:"))
    threshold_layout.addWidget(threshold_spinbox)
    threshold_layout.addWidget(above_radio)
    threshold_layout.addWidget(below_radio)

    range_layout = QHBoxLayout()
    range_layout.addWidget(QLabel("Минимальная температура:"))
    range_layout.addWidget(min_temp_spinbox)
    range_layout.addWidget(QLabel("Максимальная температура:"))
    range_layout.addWidget(max_temp_spinbox)

    layout.addLayout(type_layout)
    layout.addLayout(threshold_layout)
    layout.addLayout(range_layout)
    layout.addWidget(table)

    window.setLayout(layout)
    window.setWindowTitle("Данные о погоде")
    window.resize(600, 400)
    window.show()
    update_table()  

    app.exec_()


if __name__ == "__main__":
    json_data = [
        {"city": "Москва", "avg_temp": -5, "min_temp": -10, "max_temp": 0, "unit": "°C"},
        {"city": "Лондон", "avg_temp": 8, "min_temp": 5, "max_temp": 12, "unit": "°C"},
        {"city": "Токио", "avg_temp": 12, "min_temp": 10, "max_temp": 15, "unit": "°C"},
        {"city": "Берлин", "avg_temp": 4, "min_temp": 2, "max_temp": 6, "unit": "°C"},
        {"city": "Вашингтон", "avg_temp": 15, "min_temp": 10, "max_temp": 20, "unit": "°C"},
    ]

    with open('weather.json', 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=4)

    display_weather_data(load_weather_data('weather.json'))
